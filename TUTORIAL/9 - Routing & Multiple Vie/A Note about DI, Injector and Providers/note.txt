As you noticed, dependency injection (DI) is at the core of AngularJS,
so it's important for you to understand a thing or two about how it works.

When the application bootstraps, AngularJS creates an injector that will be used to find and inject all of the services that are required by your application.
The injector itself doesn't know anything about what the $http or $route services do.
In fact, the injector doesn't even know about the existence of these services, unless it is configured with proper module definitions.

The injector only carries out the following steps:

-Load the module definition(s) that you specify in your application.
-Register all Providers defined in these module definition(s).
-When asked to do so, lazily instantiate services and their dependencies, via their Providers, as parameters to an injectable function.

Providers are objects that provide (create) instances of services and expose configuration APIs, that can be used to control the creation and runtime behavior of a service.
In case of the $route service, the $routeProvider exposes APIs that allow you to define routes for your application.

Note: Providers can only be injected into config functions. Thus you could not inject $routeProvider into PhoneListController at runtime.

AngularJS modules solve the problem of removing global variables from the application and provide a way of configuring the injector.
As opposed to AMD or require.js modules, AngularJS modules don't try to solve the problem of script load ordering or lazy script fetching.
These goals are totally independent and both module systems can live side-by-side and fulfill their goals.

To deepen your understanding on AngularJS's DI, see Understanding Dependency Injection.