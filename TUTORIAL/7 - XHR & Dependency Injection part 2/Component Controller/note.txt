We will use AngularJS's $http service in our controller for making an HTTP request to our web server to fetch the data in the app/phones/phones.json file. 
$http is just one of several built-in AngularJS services that handle common operations in web applications. 
AngularJS injects these services for you, right where you need them.

Services are managed by AngularJS's DI subsystem. 
Dependency injection helps to make your web applications both well-structured (e.g. separate entities for presentation, data, and control) and loosely coupled 
(dependencies between entities are not resolved by the entities themselves, but by the DI subsystem). 
As a result, applications are easier to test as well.

$http makes an HTTP GET request to our web server, asking for phones.json (the URL is relative to our index.html file). 
The server responds by providing the data in the JSON file. (The response might just as well have been dynamically generated by a backend server. 
To the browser and our app, they both look the same. For the sake of simplicity, we will use JSON files in this tutorial.)

The $http service returns a promise object, which has a then() method. 
We call this method to handle the asynchronous response and assign the phone data to the controller, as a property called phones. 
Notice that AngularJS detected the JSON response and parsed it for us into the data property of the response object passed to our callback!

Since we are making the assignment of the phones property in a callback function, where the this value is not defined, 
we also introduce a local variable called self that points back to the controller instance.

To use a service in AngularJS, you simply declare the names of the dependencies you need as arguments to the controller's constructor function, as follows:

function PhoneListController($http) {...}
AngularJS's dependency injector provides services to your controller, when the controller is being constructed. The dependency injector also takes care of creating any transitive dependencies the service may have (services often depend upon other services).

Note that the names of arguments are significant, because the injector uses these to look up the dependencies.